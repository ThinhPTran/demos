(ns tailrecursion.hoplon.app-pages._index_DOT_html (:require [tailrecursion.hoplon.reload :refer [reload-all]] [tailrecursion.javelin :refer [alts! cell-map propagate! next-rank deref* lift cell input? cell-doseq* bf-seq destroy-cell! last-rank set-cell! set-formula! cell?]] [tailrecursion.hoplon :refer [script do! track article noscript command h4 h3 mark basefont h5 span input h2 th label h6 pre nav vector?* address sup h1 table font option datalist u safe-nth on! footer select q samp source summary li p td noframes node? iframe rel tr s *initfns* add-attributes! colgroup relx html dfn optgroup tbody text-val! ul hgroup sub strong data progress loop-tpl* acronym append-child replace-children! img details fieldset html-head em html-time rt when-dom video keygen div val-id dt ol link init form is-ie8 check-val! menu timeout del a parse-args area legend hr dir header param meter tfoot blockquote eventsource b dl figcaption caption route-cell style rel-event abbr ruby applet html-meta bdi embed rp figure on-append! canvas section object strike title button output audio initialized? add-children! dd bdo cite code kbd big seq?* frame rely col tt i ins thead unsplice isindex frameset center spliced base $text by-id $comment br textarea wbr html-map small add-initfn! html-body aside html-var]]) (:require-macros [tailrecursion.javelin :refer [cell-doseq cell= defc defc= mx with-let prop-cell mx2 cell-let set-cell!= macroexpand-all]] [tailrecursion.hoplon :refer [with-init! body text defelem loop-tpl head with-timeout with-interval def-values flatten-expr]]))

(clojure.core/defn ^:export hoploninit [] (reload-all) (defelem swap-button [{:keys [state func], :or {func identity}, :as attr} kids] (let [attr (dissoc attr :state :func)] ((button :on-click (fn* [] (swap! state (deref* func)))) attr kids))) (defelem counter [attr _] (let [my-count (cell 0)] (div attr (label (text "~{my-count}")) (swap-button :state my-count :func inc "+") (swap-button :state my-count :func dec "-")))) (defelem counters [{:keys [size], :or {size 10}, :as attr} _] (let [last-clicked (cell nil) attr (dissoc attr :size)] (div attr (h1 "A Counting Widget!") (p :toggle last-clicked (text "Last clicked item was ~{last-clicked}")) (loop-tpl :bindings [i (cell= (range 0 size))] (counter :on-click (fn* [] (reset! last-clicked (clojure.core/deref i)))))))) (html (head (meta :charset "UTF-8") (title "Hoplon â€¢ Counters")) (body (counters :size 10) (p (a :href "https://github.com/tailrecursion/hoplon-demos/blob/master/counters/src/index.cljs.hl" "Source code")) (p "Inspired by " (a :href "https://github.com/swannodette/om/tree/master/examples/counters" "the Om demo of the same name.")))) (tailrecursion.hoplon/init))
