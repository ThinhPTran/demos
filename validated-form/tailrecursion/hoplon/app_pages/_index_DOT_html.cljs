(ns tailrecursion.hoplon.app-pages._index_DOT_html (:require [tailrecursion.javelin :refer [alts! cell-map propagate! next-rank deref* lift cell input? cell-doseq* bf-seq destroy-cell! last-rank set-cell! set-formula! cell?]] [tailrecursion.hoplon :refer [script do! track article noscript command h4 h3 mark basefont h5 span input h2 th label h6 pre nav vector?* address sup h1 table font option datalist u safe-nth on! footer select q samp source summary li p td noframes node? iframe rel tr s *initfns* add-attributes! colgroup relx html dfn optgroup tbody text-val! ul hgroup sub strong data progress loop-tpl* acronym append-child replace-children! img details fieldset html-head em html-time rt when-dom video keygen div val-id dt ol link init form is-ie8 check-val! menu timeout del a parse-args area legend hr dir header param meter tfoot blockquote eventsource b dl figcaption caption route-cell style rel-event abbr ruby applet html-meta bdi embed rp figure on-append! canvas section object strike title button output audio initialized? add-children! dd bdo cite code kbd big seq?* frame rely col tt i ins thead unsplice isindex frameset center spliced base $text by-id $comment br textarea wbr html-map small add-initfn! html-body aside html-var]]) (:require-macros [vform.core :refer [defv]] [tailrecursion.javelin :refer [cell-doseq cell= defc defc= mx with-let prop-cell mx2 cell-let set-cell!= macroexpand-all]] [tailrecursion.hoplon :refer [with-init! body text defelem loop-tpl head with-timeout with-interval def-values flatten-expr]]))

(clojure.core/defn ^:export hoploninit [] (defc form-name nil) (defc form-email nil) (defn validate-presence [v] (seq v)) (defn validate-regexp [r] (fn [v] (re-matches r (or v "")))) (defv form-name-valid? form-name validate-presence) (defv form-email-valid? form-email (validate-regexp #"(?i)\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b")) (defc= is-form-valid? (and (:valid? form-name-valid?) (:valid? form-email-valid?))) (defc= form-data {:name form-name, :email form-email}) (defn submit-form [_] (js/alert (str "Send: " (pr-str (clojure.core/deref form-data))))) (defelem cell-input [{:keys [cell], :as attrs}] (let [target-value (fn* [p1__5373#] (do! (-> p1__5373# .-currentTarget) :value))] (input (-> attrs (dissoc :cell) (assoc :type (:type attrs "text") :value cell :on-input (fn* [p1__5374#] (reset! cell (target-value p1__5374#)))))))) (defelem form-group [{:keys [valid?], :as attrs} body] (let [dirty? (fn [v] (-> v nil? not))] ((div (dissoc attrs :valid?) body) :do-class (cell= {:form-group true, :has-error (and (dirty? (:value valid?)) (not (:valid? valid?)))})))) (defelem input-control [attrs] ((cell-input attrs) :do-class {:form-control true})) (html (head (title "Hoplon â€¢ Validated Form") (link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css") (link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css") (link :rel "stylesheet" :href "style.css")) (body (div :class "site-wrapper" (div :class "site-wrapper-inner" (div :class "cover-container" (div :class "inner cover" (form :on-submit submit-form (form-group :valid? form-name-valid? (label "Name") (input-control :cell form-name)) (form-group :valid? form-email-valid? (label "Email") (input-control :cell form-email)) (div :class "text-right" (button :class "btn btn-primary" :type "submit" :disabled (cell= (not is-form-valid?)) "Submit"))))))))) (tailrecursion.hoplon/init))
