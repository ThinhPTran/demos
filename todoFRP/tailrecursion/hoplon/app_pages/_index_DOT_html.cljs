(ns tailrecursion.hoplon.app-pages._index_DOT_html (:refer-clojure :exclude [nth]) (:require [tailrecursion.hoplon.reload :refer [reload-all]] [tailrecursion.hoplon.util :refer [nth name pluralize]] [tailrecursion.hoplon.storage-atom :refer [local-storage]] [tailrecursion.javelin :refer [alts! cell-map propagate! next-rank deref* lift cell input? cell-doseq* bf-seq destroy-cell! last-rank set-cell! set-formula! cell?]] [tailrecursion.hoplon :refer [script do! track article noscript command h4 h3 mark basefont h5 span input h2 th label h6 pre nav vector?* address sup h1 table font option datalist u safe-nth on! footer select q samp source summary li p td noframes node? iframe rel tr s *initfns* add-attributes! colgroup relx html dfn optgroup tbody text-val! ul hgroup sub strong data progress loop-tpl* acronym append-child replace-children! img details fieldset html-head em html-time rt when-dom video keygen div val-id dt ol link init form is-ie8 check-val! menu timeout del a parse-args area legend hr dir header param meter tfoot blockquote eventsource b dl figcaption caption route-cell style rel-event abbr ruby applet html-meta bdi embed rp figure on-append! canvas section object strike title button output audio initialized? add-children! dd bdo cite code kbd big seq?* frame rely col tt i ins thead unsplice isindex frameset center spliced base $text by-id $comment br textarea wbr html-map small add-initfn! html-body aside html-var]]) (:require-macros [tailrecursion.javelin :refer [cell-doseq cell= defc defc= mx with-let prop-cell mx2 cell-let set-cell!= macroexpand-all]] [tailrecursion.hoplon :refer [with-init! body text defelem loop-tpl head with-timeout with-interval def-values flatten-expr]]))

(clojure.core/defn ^:export hoploninit [] (declare route state editing) (reload-all) (def mapvi (comp vec map-indexed)) (defn dissocv [v i] (let [z (- (dec (count v)) i)] (cond (neg? z) v (zero? z) (pop v) (pos? z) (into (subvec v 0 i) (subvec v (inc i)))))) (defn decorate [todo route editing i] (let [{done? :completed, text :text} todo] (-> todo (assoc :editing (= editing i) :visible (and (not (empty? text)) (or (= "#/" route) (and (= "#/active" route) (not done?)) (and (= "#/completed" route) done?))))))) (def state (-> (cell []) (local-storage :tailrecursion.boot.user/store))) (defc loaded? false) (defc editing nil) (def route (route-cell "#/")) (defc= completed (filter :completed state)) (defc= active (remove :completed state)) (defc= plural-item (pluralize "item" (count active))) (defc= todos (mapvi (fn* [p1__5373# p2__5374#] (list p1__5373# (decorate p2__5374# route editing p1__5373#))) state)) (defn todo [t] {:completed false, :text t}) (defn destroy! [i] (swap! state dissocv i)) (defn done! [i v] (swap! state assoc-in [i :completed] v)) (defn clear-done! [& _] (swap! state (fn* [p1__5375#] (vec (remove :completed p1__5375#))))) (defn new! [t] (when (not (empty? t)) (swap! state conj (todo t)))) (defn all-done! [v] (swap! state (fn* [p1__5376#] (mapv (fn [x] (assoc x :completed v)) p1__5376#)))) (defn editing! [i v] (reset! editing (if v i nil))) (defn text! [i v] (if (empty? v) (destroy! i) (swap! state assoc-in [i :text] v))) (html :lang "en" (head (meta :charset "utf-8") (meta :http-equiv "X-UA-Compatible" :content "IE=edge,chrome=1") (link :rel "stylesheet" :href "base.css") (title "Hoplon â€¢ TodoMVC")) (body (noscript (div :id "noscript" (p "JavaScript is required to view this page."))) (div (section :id "todoapp" (header :id "header" (h1 "todos") (form :on-submit (fn* [] (do (new! (val-id :new-todo)) (do! (by-id :new-todo) :value ""))) (input :id "new-todo" :type "text" :autofocus true :placeholder "What needs to be done?" :on-blur (fn* [] (do! (by-id :new-todo) :value ""))))) (section :id "main" :do-toggle (cell= (not (and (empty? active) (empty? completed)))) (input :id "toggle-all" :type "checkbox" :do-attr (cell= {:checked (empty? active)}) :on-click (fn* [] (all-done! (val-id :toggle-all)))) (label :for "toggle-all" "Mark all as complete") (ul :id "todo-list" (loop-tpl :reverse true :bind-ids [done# edit#] :bindings [[i {edit? :editing, done? :completed, todo-text :text, show? :visible}] todos] (li :do-class (cell= {:completed done?, :editing edit?}) :do-toggle show? (div :class "view" :on-dblclick (fn* [] (editing! (clojure.core/deref i) true)) (input :id done# :type "checkbox" :class "toggle" :do-attr (cell= {:checked done?}) :on-click (fn* [] (done! (clojure.core/deref i) (val-id done#)))) (label (text "~{todo-text}")) (button :type "submit" :class "destroy" :on-click (fn* [] (destroy! (clojure.core/deref i))))) (form :on-submit (fn* [] (editing! (clojure.core/deref i) false)) (input :id edit# :type "text" :class "edit" :do-value todo-text :do-focus edit? :on-blur (fn* [] (when (clojure.core/deref edit?) (editing! (clojure.core/deref i) false))) :on-change (fn* [] (when (clojure.core/deref edit?) (text! (clojure.core/deref i) (val-id edit#)))))))))) (footer :id "footer" :do-toggle (cell= (not (and (empty? active) (empty? completed)))) (span :id "todo-count" (strong (text "~(count active) ")) (span (text "~{plural-item} left"))) (ul :id "filters" (li (a :href "#/" :do-class (cell= {:selected (= "#/" route)}) "All")) (li (a :href "#/active" :do-class (cell= {:selected (= "#/active" route)}) "Active")) (li (a :href "#/completed" :do-class (cell= {:selected (= "#/completed" route)}) "Completed"))) (button :type "submit" :id "clear-completed" :on-click (fn* [] (clear-done!)) (text "Clear completed (~(count completed))")))) (footer :id "info" (p "Double-click to edit a todo") (p "Part of " (a :href "http://github.com/tailrecursion/hoplon-demos/" "hoplon-demos")))))) (tailrecursion.hoplon/init))
