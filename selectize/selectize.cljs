(ns selectize (:require [tailrecursion.javelin :refer [alts! cell-map propagate! next-rank deref* lift cell input? cell-doseq* bf-seq destroy-cell! last-rank set-cell! set-formula! cell?]] [tailrecursion.hoplon :refer [script do! track article noscript command h4 h3 mark basefont h5 span input h2 th label h6 pre nav vector?* address sup h1 table font option datalist u safe-nth on! footer select q samp source summary li p td noframes node? iframe rel tr s *initfns* add-attributes! colgroup relx html dfn optgroup tbody text-val! ul hgroup sub strong data progress loop-tpl* acronym append-child replace-children! img details fieldset html-head em html-time rt when-dom video keygen div val-id dt ol link init form is-ie8 check-val! menu timeout del a parse-args area legend hr dir header param meter tfoot blockquote eventsource b dl figcaption caption route-cell style rel-event abbr ruby applet html-meta bdi embed rp figure on-append! canvas section object strike title button output audio initialized? add-children! dd bdo cite code kbd big seq?* frame rely col tt i ins thead unsplice isindex frameset center spliced base $text by-id $comment br textarea wbr html-map small add-initfn! html-body aside html-var]]) (:require-macros [tailrecursion.javelin :refer [cell-doseq cell= defc defc= mx with-let prop-cell mx2 cell-let set-cell!= macroexpand-all]] [tailrecursion.hoplon :refer [with-init! body text defelem loop-tpl head with-timeout with-interval def-values flatten-expr]]))

(defn- wrap-render [selectize-attrs] (update-in selectize-attrs [:render] (fn [render] (reduce-kv (fn [m k f] (assoc m k (comp (fn* [p1__6559#] (.-innerHTML (div p1__6559#))) f js->clj))) {} render))))

(defelem selectize [{:keys [cell id class render], :as attrs} options] (with-let [s (select :id id :class (str "selectized " class) options)] (let [new-attrs (wrap-render (merge attrs (if cell {:onChange (fn* [p1__6560#] (reset! cell p1__6560#))})))] (add-initfn! (fn* [] (.selectize (js/jQuery s) (clj->js new-attrs)))))))
